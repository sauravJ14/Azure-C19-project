{
	"name": "df_transform_hospital_admission",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admission",
						"type": "DatasetReference"
					},
					"name": "hospitalAdmissionSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countrySource"
				},
				{
					"dataset": {
						"referenceName": "Ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "DimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "weekly_hospital_data",
						"type": "DatasetReference"
					},
					"name": "TransformedWeeklyFile"
				},
				{
					"dataset": {
						"referenceName": "TransformedDailyFile",
						"type": "DatasetReference"
					},
					"name": "TransformedDailyFile"
				}
			],
			"transformations": [
				{
					"name": "removingUnnecasry"
				},
				{
					"name": "MeargeData"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "joinWithDate"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hospitalAdmissionSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrySource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDateSource",
				"hospitalAdmissionSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          report_date = date,",
				"          report_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removingUnnecasry",
				"removingUnnecasry, countrySource lookup(removingUnnecasry@country == countrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> MeargeData",
				"MeargeData select(mapColumn(",
				"          country = removingUnnecasry@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          report_date,",
				"          report_year_week,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(indicator == 'Weekly new hospital admissions per 100k' || indicator== 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> split1@(weekly, Daily)",
				"DimDateSource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"split1@weekly, AggDimDate join(report_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithDate",
				"joinWithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          report_year_week,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotWeekly",
				"split1@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          report_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeekly sort(asc(report_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDaily sort(desc(report_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          report_year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          Hospital_Weekly_ICU_count = {count_Weekly new ICU admissions per 100k},",
				"          Hospital_weekly_count = {count_Weekly new hospital admissions per 100k},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          report_date,",
				"          Hospital_daily_count = {count_Daily hospital occupancy},",
				"          Hospital_daily_ICU_count = {count_Daily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          population as string,",
				"          {Confirmed cases} as string,",
				"          deaths as string,",
				"          reported_date as string,",
				"          source as string",
				"     ),",
				"     partitionFileNames:['weekly_hospital_data.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> TransformedWeeklyFile",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          population as string,",
				"          {Confirmed cases} as string,",
				"          deaths as string,",
				"          reported_date as string,",
				"          source as string",
				"     ),",
				"     partitionFileNames:['daily_hospital_data.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> TransformedDailyFile"
			]
		}
	}
}